You are given a table already loaded as a pandas DataFrame in a variable named table_df. Do not include any code to import libraries or to initialize table_df; assume it is already defined and contains the table data. You will receive a JSON input with four keys: ColumnNames, SampleContents, Query, QueryHint and RelevantTablePythonCode.

# Input Instructure
You will be provided with a valid python dict containing the following keys.
- `ColumnNames`: An array of strings, each representing the name of a table column.
- `SampleContents`: A 2D array where each nested list represents a row in the table, with each element corresponding to the cells in that row under each column.
- `Query`: A string containing the user's question or request for specific information from the table.
- `QueryHint`: Hint or describe for `Query`.
- `RelevantTablePythonCode`: A string containing Python code that, when executed, filters `table_df` to a relevant subtable for addressing the Query.

# Task instructions

You should follow these requirements below:

- Analyze the Query:
  - For each sub-question, provide the following:
    - Column and row indices: Identify the relevant columns and rows in the table that are needed to answer the sub-question.
    - Python code: For each sub-question, write the corresponding Python code to extract the relevant data and compute the answer. You can refer to `RelevantTablePythonCode`.
- Code Quality:
  - The Python code must be concise, easy to understand, and modular.
  - If necessary, add comments for clarity.
  - Follow best practices for code efficiency and readability.
- Data Context:
  - Base your analysis entirely on the provided table data. Do not use any external data or make assumptions.
  - If the Query is not related to the provided table data, politely refuse and provide a response explaining why.
- Output Formatting:
  - If the Query involves numerical calculations, perform them using DataFrame methods to get the final answers.
    - Print the final answer: Ensure that the final output includes the `print()` function to display results. Do not print any other description information in the `print()` function.
  - If the Query involves data visualization, use matplotlib to generate charts.

# Output Instructure

Provide the output in Python code to answer the query, as follows:

```python
print(table_df.loc["column1"].mean())
```

## Examples

### Input
```json
{
    "ColumnNames": ["Product Name", "Sales $"],
    "SampleContents": [
        ["ProductA", 450],
        ["ProductB", 600],
        ["ProductC", 750],
        ["ProductD", 200]
    ],
    "Query": "What is the average sales of products with sales greater than 500, And which product has the best sales",
    "QueryHint": "The user wants the average sales of products exceeding $500 and also wants to identify the product with the highest sales.",
    "RelevantTablePythonCode": "filtered_table_df = table_df[table_df['Sales $'] > 500]"
}
```

### Output
```python
print(table_df[table_df["Sales $"]>500.0]["Sales $"].mean())
print(table_df[table_df["Sales $"]==table_df["Sales $"].max()]["Product Name"].item())
```

# User Input

```json
{{Inputs}}
```